State 0:
## Known stack suffix:
##
## LR(1) items:
file' -> . file [ # ]
## Transitions:
-- On INTEGER shift to state 1
-- On EOF shift to state 2
-- On type_specifier shift to state 3
-- On scalar_specifier shift to state 15
-- On function_definition shift to state 36
-- On function_declarator shift to state 37
-- On file shift to state 188
-- On external_declaration shift to state 189
-- On declaration_ptr_fun shift to state 178
-- On declaration shift to state 191
## Reductions:

State 1:
## Known stack suffix:
## INTEGER
## LR(1) items:
scalar_specifier -> INTEGER . [ STAR_CHR OPEN_PAREN_CHR IDENTIFIER COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On STAR_CHR OPEN_PAREN_CHR IDENTIFIER COMMA_CHR CLOSE_PAREN_CHR
--   reduce production scalar_specifier -> INTEGER

State 2:
## Known stack suffix:
## EOF
## LR(1) items:
file -> EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> EOF

State 3:
## Known stack suffix:
## type_specifier
## LR(1) items:
declaration -> type_specifier . declarator SEMI_CHR [ INTEGER EOF ]
declaration_ptr_fun -> type_specifier . OPEN_PAREN_CHR STAR_CHR identifier CLOSE_PAREN_CHR parameter_specifier [ SEMI_CHR ]
function_declarator -> type_specifier . identifier parameter_declarator [ OPEN_BRACE_CHR ]
scalar_specifier -> type_specifier . STAR_CHR [ STAR_CHR OPEN_PAREN_CHR IDENTIFIER ]
## Transitions:
-- On STAR_CHR shift to state 4
-- On OPEN_PAREN_CHR shift to state 5
-- On IDENTIFIER shift to state 7
-- On identifier shift to state 20
-- On declarator shift to state 34
## Reductions:

State 4:
## Known stack suffix:
## type_specifier STAR_CHR
## LR(1) items:
scalar_specifier -> type_specifier STAR_CHR . [ STAR_CHR OPEN_PAREN_CHR IDENTIFIER COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On STAR_CHR OPEN_PAREN_CHR IDENTIFIER COMMA_CHR CLOSE_PAREN_CHR
--   reduce production scalar_specifier -> type_specifier STAR_CHR

State 5:
## Known stack suffix:
## type_specifier OPEN_PAREN_CHR
## LR(1) items:
declaration_ptr_fun -> type_specifier OPEN_PAREN_CHR . STAR_CHR identifier CLOSE_PAREN_CHR parameter_specifier [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On STAR_CHR shift to state 6
## Reductions:

State 6:
## Known stack suffix:
## type_specifier OPEN_PAREN_CHR STAR_CHR
## LR(1) items:
declaration_ptr_fun -> type_specifier OPEN_PAREN_CHR STAR_CHR . identifier CLOSE_PAREN_CHR parameter_specifier [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On IDENTIFIER shift to state 7
-- On identifier shift to state 8
## Reductions:

State 7:
## Known stack suffix:
## IDENTIFIER
## LR(1) items:
identifier -> IDENTIFIER . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_PAREN_CHR OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_PAREN_CHR OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production identifier -> IDENTIFIER

State 8:
## Known stack suffix:
## type_specifier OPEN_PAREN_CHR STAR_CHR identifier
## LR(1) items:
declaration_ptr_fun -> type_specifier OPEN_PAREN_CHR STAR_CHR identifier . CLOSE_PAREN_CHR parameter_specifier [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On CLOSE_PAREN_CHR shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## type_specifier OPEN_PAREN_CHR STAR_CHR identifier CLOSE_PAREN_CHR
## LR(1) items:
declaration_ptr_fun -> type_specifier OPEN_PAREN_CHR STAR_CHR identifier CLOSE_PAREN_CHR . parameter_specifier [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On OPEN_PAREN_CHR shift to state 10
-- On parameter_specifier shift to state 19
## Reductions:

State 10:
## Known stack suffix:
## OPEN_PAREN_CHR
## LR(1) items:
parameter_specifier -> OPEN_PAREN_CHR . CLOSE_PAREN_CHR [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
parameter_specifier -> OPEN_PAREN_CHR . parameter_specifier_list CLOSE_PAREN_CHR [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On INTEGER shift to state 1
-- On CLOSE_PAREN_CHR shift to state 11
-- On type_specifier_list shift to state 12
-- On type_specifier shift to state 16
-- On scalar_specifier shift to state 15
-- On parameter_specifier_list shift to state 17
## Reductions:

State 11:
## Known stack suffix:
## OPEN_PAREN_CHR CLOSE_PAREN_CHR
## LR(1) items:
parameter_specifier -> OPEN_PAREN_CHR CLOSE_PAREN_CHR . [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR
--   reduce production parameter_specifier -> OPEN_PAREN_CHR CLOSE_PAREN_CHR

State 12:
## Known stack suffix:
## type_specifier_list
## LR(1) items:
parameter_specifier_list -> type_specifier_list . [ CLOSE_PAREN_CHR ]
type_specifier_list -> type_specifier_list . COMMA_CHR type_specifier [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On COMMA_CHR shift to state 13
## Reductions:
-- On CLOSE_PAREN_CHR
--   reduce production parameter_specifier_list -> type_specifier_list

State 13:
## Known stack suffix:
## type_specifier_list COMMA_CHR
## LR(1) items:
type_specifier_list -> type_specifier_list COMMA_CHR . type_specifier [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On INTEGER shift to state 1
-- On type_specifier shift to state 14
-- On scalar_specifier shift to state 15
## Reductions:

State 14:
## Known stack suffix:
## type_specifier_list COMMA_CHR type_specifier
## LR(1) items:
scalar_specifier -> type_specifier . STAR_CHR [ STAR_CHR COMMA_CHR CLOSE_PAREN_CHR ]
type_specifier_list -> type_specifier_list COMMA_CHR type_specifier . [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On STAR_CHR shift to state 4
## Reductions:
-- On COMMA_CHR CLOSE_PAREN_CHR
--   reduce production type_specifier_list -> type_specifier_list COMMA_CHR type_specifier

State 15:
## Known stack suffix:
## scalar_specifier
## LR(1) items:
type_specifier -> scalar_specifier . [ STAR_CHR OPEN_PAREN_CHR IDENTIFIER COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On STAR_CHR OPEN_PAREN_CHR IDENTIFIER COMMA_CHR CLOSE_PAREN_CHR
--   reduce production type_specifier -> scalar_specifier

State 16:
## Known stack suffix:
## type_specifier
## LR(1) items:
scalar_specifier -> type_specifier . STAR_CHR [ STAR_CHR COMMA_CHR CLOSE_PAREN_CHR ]
type_specifier_list -> type_specifier . [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On STAR_CHR shift to state 4
## Reductions:
-- On COMMA_CHR CLOSE_PAREN_CHR
--   reduce production type_specifier_list -> type_specifier

State 17:
## Known stack suffix:
## OPEN_PAREN_CHR parameter_specifier_list
## LR(1) items:
parameter_specifier -> OPEN_PAREN_CHR parameter_specifier_list . CLOSE_PAREN_CHR [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On CLOSE_PAREN_CHR shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## OPEN_PAREN_CHR parameter_specifier_list CLOSE_PAREN_CHR
## LR(1) items:
parameter_specifier -> OPEN_PAREN_CHR parameter_specifier_list CLOSE_PAREN_CHR . [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR
--   reduce production parameter_specifier -> OPEN_PAREN_CHR parameter_specifier_list CLOSE_PAREN_CHR

State 19:
## Known stack suffix:
## type_specifier OPEN_PAREN_CHR STAR_CHR identifier CLOSE_PAREN_CHR parameter_specifier
## LR(1) items:
declaration_ptr_fun -> type_specifier OPEN_PAREN_CHR STAR_CHR identifier CLOSE_PAREN_CHR parameter_specifier . [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR
--   reduce production declaration_ptr_fun -> type_specifier OPEN_PAREN_CHR STAR_CHR identifier CLOSE_PAREN_CHR parameter_specifier

State 20:
## Known stack suffix:
## type_specifier identifier
## LR(1) items:
declarator -> identifier . [ SEMI_CHR ]
function_declarator -> type_specifier identifier . parameter_declarator [ OPEN_BRACE_CHR ]
## Transitions:
-- On OPEN_PAREN_CHR shift to state 21
-- On parameter_declarator shift to state 33
## Reductions:
-- On SEMI_CHR
--   reduce production declarator -> identifier

State 21:
## Known stack suffix:
## OPEN_PAREN_CHR
## LR(1) items:
parameter_declarator -> OPEN_PAREN_CHR . CLOSE_PAREN_CHR [ OPEN_BRACE_CHR ]
parameter_declarator -> OPEN_PAREN_CHR . parameter_type_list CLOSE_PAREN_CHR [ OPEN_BRACE_CHR ]
## Transitions:
-- On INTEGER shift to state 1
-- On CLOSE_PAREN_CHR shift to state 22
-- On type_specifier shift to state 23
-- On scalar_specifier shift to state 15
-- On parameter_type_list shift to state 26
-- On parameter_list shift to state 28
-- On parameter_declaration shift to state 32
-- On declaration_ptr_fun shift to state 31
## Reductions:

State 22:
## Known stack suffix:
## OPEN_PAREN_CHR CLOSE_PAREN_CHR
## LR(1) items:
parameter_declarator -> OPEN_PAREN_CHR CLOSE_PAREN_CHR . [ OPEN_BRACE_CHR ]
## Transitions:
## Reductions:
-- On OPEN_BRACE_CHR
--   reduce production parameter_declarator -> OPEN_PAREN_CHR CLOSE_PAREN_CHR

State 23:
## Known stack suffix:
## type_specifier
## LR(1) items:
declaration_ptr_fun -> type_specifier . OPEN_PAREN_CHR STAR_CHR identifier CLOSE_PAREN_CHR parameter_specifier [ COMMA_CHR CLOSE_PAREN_CHR ]
parameter_declaration -> type_specifier . declarator [ COMMA_CHR CLOSE_PAREN_CHR ]
scalar_specifier -> type_specifier . STAR_CHR [ STAR_CHR OPEN_PAREN_CHR IDENTIFIER ]
## Transitions:
-- On STAR_CHR shift to state 4
-- On OPEN_PAREN_CHR shift to state 5
-- On IDENTIFIER shift to state 7
-- On identifier shift to state 24
-- On declarator shift to state 25
## Reductions:

State 24:
## Known stack suffix:
## identifier
## LR(1) items:
declarator -> identifier . [ SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR CLOSE_PAREN_CHR
--   reduce production declarator -> identifier

State 25:
## Known stack suffix:
## type_specifier declarator
## LR(1) items:
parameter_declaration -> type_specifier declarator . [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On COMMA_CHR CLOSE_PAREN_CHR
--   reduce production parameter_declaration -> type_specifier declarator

State 26:
## Known stack suffix:
## OPEN_PAREN_CHR parameter_type_list
## LR(1) items:
parameter_declarator -> OPEN_PAREN_CHR parameter_type_list . CLOSE_PAREN_CHR [ OPEN_BRACE_CHR ]
## Transitions:
-- On CLOSE_PAREN_CHR shift to state 27
## Reductions:

State 27:
## Known stack suffix:
## OPEN_PAREN_CHR parameter_type_list CLOSE_PAREN_CHR
## LR(1) items:
parameter_declarator -> OPEN_PAREN_CHR parameter_type_list CLOSE_PAREN_CHR . [ OPEN_BRACE_CHR ]
## Transitions:
## Reductions:
-- On OPEN_BRACE_CHR
--   reduce production parameter_declarator -> OPEN_PAREN_CHR parameter_type_list CLOSE_PAREN_CHR

State 28:
## Known stack suffix:
## parameter_list
## LR(1) items:
parameter_list -> parameter_list . COMMA_CHR parameter_declaration [ COMMA_CHR CLOSE_PAREN_CHR ]
parameter_type_list -> parameter_list . [ CLOSE_PAREN_CHR ]
## Transitions:
-- On COMMA_CHR shift to state 29
## Reductions:
-- On CLOSE_PAREN_CHR
--   reduce production parameter_type_list -> parameter_list

State 29:
## Known stack suffix:
## parameter_list COMMA_CHR
## LR(1) items:
parameter_list -> parameter_list COMMA_CHR . parameter_declaration [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On INTEGER shift to state 1
-- On type_specifier shift to state 23
-- On scalar_specifier shift to state 15
-- On parameter_declaration shift to state 30
-- On declaration_ptr_fun shift to state 31
## Reductions:

State 30:
## Known stack suffix:
## parameter_list COMMA_CHR parameter_declaration
## LR(1) items:
parameter_list -> parameter_list COMMA_CHR parameter_declaration . [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On COMMA_CHR CLOSE_PAREN_CHR
--   reduce production parameter_list -> parameter_list COMMA_CHR parameter_declaration

State 31:
## Known stack suffix:
## declaration_ptr_fun
## LR(1) items:
parameter_declaration -> declaration_ptr_fun . [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On COMMA_CHR CLOSE_PAREN_CHR
--   reduce production parameter_declaration -> declaration_ptr_fun

State 32:
## Known stack suffix:
## parameter_declaration
## LR(1) items:
parameter_list -> parameter_declaration . [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On COMMA_CHR CLOSE_PAREN_CHR
--   reduce production parameter_list -> parameter_declaration

State 33:
## Known stack suffix:
## type_specifier identifier parameter_declarator
## LR(1) items:
function_declarator -> type_specifier identifier parameter_declarator . [ OPEN_BRACE_CHR ]
## Transitions:
## Reductions:
-- On OPEN_BRACE_CHR
--   reduce production function_declarator -> type_specifier identifier parameter_declarator

State 34:
## Known stack suffix:
## type_specifier declarator
## LR(1) items:
declaration -> type_specifier declarator . SEMI_CHR [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On SEMI_CHR shift to state 35
## Reductions:

State 35:
## Known stack suffix:
## type_specifier declarator SEMI_CHR
## LR(1) items:
declaration -> type_specifier declarator SEMI_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production declaration -> type_specifier declarator SEMI_CHR

State 36:
## Known stack suffix:
## function_definition
## LR(1) items:
external_declaration -> function_definition . [ INTEGER EOF ]
## Transitions:
## Reductions:
-- On INTEGER EOF
--   reduce production external_declaration -> function_definition

State 37:
## Known stack suffix:
## function_declarator
## LR(1) items:
function_definition -> function_declarator . compound_statement [ INTEGER EOF ]
## Transitions:
-- On OPEN_BRACE_CHR shift to state 38
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On compound_statement shift to state 187
## Reductions:

State 38:
## Known stack suffix:
## OPEN_BRACE_CHR
## LR(1) items:
open_brace -> OPEN_BRACE_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production open_brace -> OPEN_BRACE_CHR

State 39:
## Known stack suffix:
## open_brace
## LR(1) items:
open_block -> open_brace . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production open_block -> open_brace

State 40:
## Known stack suffix:
## open_block
## LR(1) items:
compound_statement -> open_block . close_block [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
compound_statement -> open_block . statement_list close_block [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
compound_statement -> open_block . declaration_list close_block [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
compound_statement -> open_block . declaration_list statement_list close_block [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On WHILE shift to state 41
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On RETURN shift to state 48
-- On OPEN_PAREN_CHR shift to state 49
-- On OPEN_BRACE_CHR shift to state 38
-- On INTEGER shift to state 1
-- On INC_OP shift to state 50
-- On IF shift to state 134
-- On IDENTIFIER shift to state 7
-- On FOR shift to state 135
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On CLOSE_BRACE_CHR shift to state 136
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On whilekw shift to state 137
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On type_specifier shift to state 172
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On statement_list shift to state 173
-- On statement shift to state 177
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On selection_statement shift to state 143
-- On scalar_specifier shift to state 15
-- On return shift to state 144
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On jump_statement shift to state 148
-- On iteration_statement shift to state 149
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On ifkw shift to state 150
-- On identifier shift to state 68
-- On forkw shift to state 155
-- On expression_statement shift to state 162
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On declaration_ptr_fun shift to state 178
-- On declaration_list shift to state 180
-- On declaration shift to state 185
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On compound_statement shift to state 165
-- On close_brace shift to state 175
-- On close_block shift to state 186
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 41:
## Known stack suffix:
## WHILE
## LR(1) items:
whilekw -> WHILE . [ OPEN_PAREN_CHR ]
## Transitions:
## Reductions:
-- On OPEN_PAREN_CHR
--   reduce production whilekw -> WHILE

State 42:
## Known stack suffix:
## TILDE_CHR
## LR(1) items:
tilde_chr -> TILDE_CHR . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production tilde_chr -> TILDE_CHR

State 43:
## Known stack suffix:
## SUB_CHR
## LR(1) items:
sub_chr -> SUB_CHR . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production sub_chr -> SUB_CHR

State 44:
## Known stack suffix:
## STRING_LITERAL
## LR(1) items:
string_literal -> STRING_LITERAL . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
string_literal -> STRING_LITERAL . string_literal [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On STRING_LITERAL shift to state 44
-- On string_literal shift to state 45
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production string_literal -> STRING_LITERAL

State 45:
## Known stack suffix:
## STRING_LITERAL string_literal
## LR(1) items:
string_literal -> STRING_LITERAL string_literal . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production string_literal -> STRING_LITERAL string_literal

State 46:
## Known stack suffix:
## STAR_CHR
## LR(1) items:
star_chr -> STAR_CHR . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production star_chr -> STAR_CHR

State 47:
## Known stack suffix:
## SEMI_CHR
## LR(1) items:
semi_chr -> SEMI_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_PAREN_CHR CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_PAREN_CHR CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production semi_chr -> SEMI_CHR

State 48:
## Known stack suffix:
## RETURN
## LR(1) items:
return -> RETURN . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production return -> RETURN

State 49:
## Known stack suffix:
## OPEN_PAREN_CHR
## LR(1) items:
primary_expression -> OPEN_PAREN_CHR . expression CLOSE_PAREN_CHR [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On expression shift to state 132
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 50:
## Known stack suffix:
## INC_OP
## LR(1) items:
inc_op -> INC_OP . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_PAREN_CHR OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP IDENTIFIER GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP CONSTANT COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR BANG_CHR AND_OP AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_PAREN_CHR OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP IDENTIFIER GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP CONSTANT COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR BANG_CHR AND_OP AMP_CHR ADD_CHR
--   reduce production inc_op -> INC_OP

State 51:
## Known stack suffix:
## DEC_OP
## LR(1) items:
dec_op -> DEC_OP . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_PAREN_CHR OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP IDENTIFIER GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP CONSTANT COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR BANG_CHR AND_OP AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_PAREN_CHR OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP IDENTIFIER GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP CONSTANT COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR BANG_CHR AND_OP AMP_CHR ADD_CHR
--   reduce production dec_op -> DEC_OP

State 52:
## Known stack suffix:
## CONSTANT
## LR(1) items:
constant -> CONSTANT . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production constant -> CONSTANT

State 53:
## Known stack suffix:
## BANG_CHR
## LR(1) items:
bang_chr -> BANG_CHR . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production bang_chr -> BANG_CHR

State 54:
## Known stack suffix:
## AMP_CHR
## LR(1) items:
amp_chr -> AMP_CHR . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production amp_chr -> AMP_CHR

State 55:
## Known stack suffix:
## ADD_CHR
## LR(1) items:
add_chr -> ADD_CHR . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production add_chr -> ADD_CHR

State 56:
## Known stack suffix:
## unary_operator
## LR(1) items:
unary_expression -> unary_operator . cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 131
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On add_chr shift to state 84
## Reductions:

State 57:
## Known stack suffix:
## unary_expression
## LR(1) items:
cast_expression -> unary_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production cast_expression -> unary_expression

State 58:
## Known stack suffix:
## tilde_chr
## LR(1) items:
unary_operator -> tilde_chr . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production unary_operator -> tilde_chr

State 59:
## Known stack suffix:
## sub_chr
## LR(1) items:
unary_operator -> sub_chr . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production unary_operator -> sub_chr

State 60:
## Known stack suffix:
## string_literal
## LR(1) items:
primary_expression -> string_literal . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production primary_expression -> string_literal

State 61:
## Known stack suffix:
## star_chr
## LR(1) items:
unary_operator -> star_chr . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production unary_operator -> star_chr

State 62:
## Known stack suffix:
## primary_expression
## LR(1) items:
postfix_expression -> primary_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production postfix_expression -> primary_expression

State 63:
## Known stack suffix:
## postfix_expression
## LR(1) items:
postfix_expression -> postfix_expression . inc_op [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
postfix_expression -> postfix_expression . dec_op [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
unary_expression -> postfix_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On INC_OP shift to state 50
-- On DEC_OP shift to state 51
-- On inc_op shift to state 64
-- On dec_op shift to state 65
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production unary_expression -> postfix_expression

State 64:
## Known stack suffix:
## postfix_expression inc_op
## LR(1) items:
postfix_expression -> postfix_expression inc_op . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production postfix_expression -> postfix_expression inc_op

State 65:
## Known stack suffix:
## postfix_expression dec_op
## LR(1) items:
postfix_expression -> postfix_expression dec_op . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production postfix_expression -> postfix_expression dec_op

State 66:
## Known stack suffix:
## inc_op
## LR(1) items:
unary_expression -> inc_op . unary_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 67
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On add_chr shift to state 84
## Reductions:

State 67:
## Known stack suffix:
## inc_op unary_expression
## LR(1) items:
unary_expression -> inc_op unary_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production unary_expression -> inc_op unary_expression

State 68:
## Known stack suffix:
## identifier
## LR(1) items:
postfix_expression -> identifier . OPEN_PAREN_CHR close_paren [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
postfix_expression -> identifier . OPEN_PAREN_CHR argument_expression_list close_paren [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
primary_expression -> identifier . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On OPEN_PAREN_CHR shift to state 69
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production primary_expression -> identifier

State 69:
## Known stack suffix:
## identifier OPEN_PAREN_CHR
## LR(1) items:
postfix_expression -> identifier OPEN_PAREN_CHR . close_paren [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
postfix_expression -> identifier OPEN_PAREN_CHR . argument_expression_list close_paren [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On CLOSE_PAREN_CHR shift to state 70
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On close_paren shift to state 125
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 126
-- On argument_expression_list shift to state 127
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 70:
## Known stack suffix:
## CLOSE_PAREN_CHR
## LR(1) items:
close_paren -> CLOSE_PAREN_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN QUES_CHR OR_OP OPEN_PAREN_CHR OPEN_BRACE_CHR OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP IF IDENTIFIER GE_OP FOR EQ_OP EQ_CHR DIV_CHR DEC_OP CONSTANT COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR BANG_CHR AND_OP AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN QUES_CHR OR_OP OPEN_PAREN_CHR OPEN_BRACE_CHR OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP IF IDENTIFIER GE_OP FOR EQ_OP EQ_CHR DIV_CHR DEC_OP CONSTANT COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR BANG_CHR AND_OP AMP_CHR ADD_CHR
--   reduce production close_paren -> CLOSE_PAREN_CHR

State 71:
## Known stack suffix:
## unary_expression
## LR(1) items:
assignment_expression -> unary_expression . EQ_CHR assignment_expression [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
cast_expression -> unary_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On EQ_CHR shift to state 72
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production cast_expression -> unary_expression

State 72:
## Known stack suffix:
## unary_expression EQ_CHR
## LR(1) items:
assignment_expression -> unary_expression EQ_CHR . assignment_expression [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 124
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 73:
## Known stack suffix:
## shift_expression
## LR(1) items:
relational_expression -> shift_expression . [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP
--   reduce production relational_expression -> shift_expression

State 74:
## Known stack suffix:
## relational_expression
## LR(1) items:
equality_expression -> relational_expression . [ SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
relational_expression -> relational_expression . OPEN_ANGLE_CHR shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . CLOSE_ANGLE_CHR shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . LE_OP shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . GE_OP shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
-- On OPEN_ANGLE_CHR shift to state 75
-- On LE_OP shift to state 96
-- On GE_OP shift to state 98
-- On CLOSE_ANGLE_CHR shift to state 100
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP
--   reduce production equality_expression -> relational_expression

State 75:
## Known stack suffix:
## relational_expression OPEN_ANGLE_CHR
## LR(1) items:
relational_expression -> relational_expression OPEN_ANGLE_CHR . shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 76
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 76:
## Known stack suffix:
## relational_expression OPEN_ANGLE_CHR shift_expression
## LR(1) items:
relational_expression -> relational_expression OPEN_ANGLE_CHR shift_expression . [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP
--   reduce production relational_expression -> relational_expression OPEN_ANGLE_CHR shift_expression

State 77:
## Known stack suffix:
## multiplicative_expression
## LR(1) items:
additive_expression -> multiplicative_expression . [ SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . STAR_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . DIV_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . MOD_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On STAR_CHR shift to state 78
-- On MOD_CHR shift to state 86
-- On DIV_CHR shift to state 88
## Reductions:
-- On SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production additive_expression -> multiplicative_expression

State 78:
## Known stack suffix:
## multiplicative_expression STAR_CHR
## LR(1) items:
multiplicative_expression -> multiplicative_expression STAR_CHR . cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 85
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On add_chr shift to state 84
## Reductions:

State 79:
## Known stack suffix:
## dec_op
## LR(1) items:
unary_expression -> dec_op . unary_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 80
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On add_chr shift to state 84
## Reductions:

State 80:
## Known stack suffix:
## dec_op unary_expression
## LR(1) items:
unary_expression -> dec_op unary_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production unary_expression -> dec_op unary_expression

State 81:
## Known stack suffix:
## constant
## LR(1) items:
primary_expression -> constant . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production primary_expression -> constant

State 82:
## Known stack suffix:
## bang_chr
## LR(1) items:
unary_operator -> bang_chr . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production unary_operator -> bang_chr

State 83:
## Known stack suffix:
## amp_chr
## LR(1) items:
unary_operator -> amp_chr . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production unary_operator -> amp_chr

State 84:
## Known stack suffix:
## add_chr
## LR(1) items:
unary_operator -> add_chr . [ TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR OPEN_PAREN_CHR INC_OP IDENTIFIER DEC_OP CONSTANT BANG_CHR AMP_CHR ADD_CHR
--   reduce production unary_operator -> add_chr

State 85:
## Known stack suffix:
## multiplicative_expression STAR_CHR cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression STAR_CHR cast_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production multiplicative_expression -> multiplicative_expression STAR_CHR cast_expression

State 86:
## Known stack suffix:
## multiplicative_expression MOD_CHR
## LR(1) items:
multiplicative_expression -> multiplicative_expression MOD_CHR . cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 87
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On add_chr shift to state 84
## Reductions:

State 87:
## Known stack suffix:
## multiplicative_expression MOD_CHR cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression MOD_CHR cast_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production multiplicative_expression -> multiplicative_expression MOD_CHR cast_expression

State 88:
## Known stack suffix:
## multiplicative_expression DIV_CHR
## LR(1) items:
multiplicative_expression -> multiplicative_expression DIV_CHR . cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 89
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On add_chr shift to state 84
## Reductions:

State 89:
## Known stack suffix:
## multiplicative_expression DIV_CHR cast_expression
## LR(1) items:
multiplicative_expression -> multiplicative_expression DIV_CHR cast_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production multiplicative_expression -> multiplicative_expression DIV_CHR cast_expression

State 90:
## Known stack suffix:
## cast_expression
## LR(1) items:
multiplicative_expression -> cast_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production multiplicative_expression -> cast_expression

State 91:
## Known stack suffix:
## additive_expression
## LR(1) items:
additive_expression -> additive_expression . ADD_CHR multiplicative_expression [ SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
additive_expression -> additive_expression . SUB_CHR multiplicative_expression [ SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
shift_expression -> additive_expression . [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
-- On SUB_CHR shift to state 92
-- On ADD_CHR shift to state 94
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP
--   reduce production shift_expression -> additive_expression

State 92:
## Known stack suffix:
## additive_expression SUB_CHR
## LR(1) items:
additive_expression -> additive_expression SUB_CHR . multiplicative_expression [ SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 93
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On add_chr shift to state 84
## Reductions:

State 93:
## Known stack suffix:
## additive_expression SUB_CHR multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression SUB_CHR multiplicative_expression . [ SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . STAR_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . DIV_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . MOD_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On STAR_CHR shift to state 78
-- On MOD_CHR shift to state 86
-- On DIV_CHR shift to state 88
## Reductions:
-- On SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production additive_expression -> additive_expression SUB_CHR multiplicative_expression

State 94:
## Known stack suffix:
## additive_expression ADD_CHR
## LR(1) items:
additive_expression -> additive_expression ADD_CHR . multiplicative_expression [ SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 95
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On add_chr shift to state 84
## Reductions:

State 95:
## Known stack suffix:
## additive_expression ADD_CHR multiplicative_expression
## LR(1) items:
additive_expression -> additive_expression ADD_CHR multiplicative_expression . [ SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . STAR_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . DIV_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
multiplicative_expression -> multiplicative_expression . MOD_CHR cast_expression [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On STAR_CHR shift to state 78
-- On MOD_CHR shift to state 86
-- On DIV_CHR shift to state 88
## Reductions:
-- On SUB_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production additive_expression -> additive_expression ADD_CHR multiplicative_expression

State 96:
## Known stack suffix:
## relational_expression LE_OP
## LR(1) items:
relational_expression -> relational_expression LE_OP . shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 97
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 97:
## Known stack suffix:
## relational_expression LE_OP shift_expression
## LR(1) items:
relational_expression -> relational_expression LE_OP shift_expression . [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP
--   reduce production relational_expression -> relational_expression LE_OP shift_expression

State 98:
## Known stack suffix:
## relational_expression GE_OP
## LR(1) items:
relational_expression -> relational_expression GE_OP . shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 99
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 99:
## Known stack suffix:
## relational_expression GE_OP shift_expression
## LR(1) items:
relational_expression -> relational_expression GE_OP shift_expression . [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP
--   reduce production relational_expression -> relational_expression GE_OP shift_expression

State 100:
## Known stack suffix:
## relational_expression CLOSE_ANGLE_CHR
## LR(1) items:
relational_expression -> relational_expression CLOSE_ANGLE_CHR . shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 101
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 101:
## Known stack suffix:
## relational_expression CLOSE_ANGLE_CHR shift_expression
## LR(1) items:
relational_expression -> relational_expression CLOSE_ANGLE_CHR shift_expression . [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP
--   reduce production relational_expression -> relational_expression CLOSE_ANGLE_CHR shift_expression

State 102:
## Known stack suffix:
## logical_or_expression
## LR(1) items:
conditional_expression -> logical_or_expression . [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
conditional_expression -> logical_or_expression . QUES_CHR expression COLON_CHR conditional_expression [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
logical_or_expression -> logical_or_expression . OR_OP logical_and_expression [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On QUES_CHR shift to state 103
-- On OR_OP shift to state 122
## Reductions:
-- On SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR
--   reduce production conditional_expression -> logical_or_expression

State 103:
## Known stack suffix:
## logical_or_expression QUES_CHR
## LR(1) items:
conditional_expression -> logical_or_expression QUES_CHR . expression COLON_CHR conditional_expression [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On expression shift to state 115
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 104:
## Known stack suffix:
## logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
logical_or_expression -> logical_and_expression . [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On AND_OP shift to state 105
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR
--   reduce production logical_or_expression -> logical_and_expression

State 105:
## Known stack suffix:
## logical_and_expression AND_OP
## LR(1) items:
logical_and_expression -> logical_and_expression AND_OP . inclusive_or_expression [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On inclusive_or_expression shift to state 106
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 106:
## Known stack suffix:
## logical_and_expression AND_OP inclusive_or_expression
## LR(1) items:
logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression . [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP
--   reduce production logical_and_expression -> logical_and_expression AND_OP inclusive_or_expression

State 107:
## Known stack suffix:
## exclusive_or_expression
## LR(1) items:
inclusive_or_expression -> exclusive_or_expression . [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP
--   reduce production inclusive_or_expression -> exclusive_or_expression

State 108:
## Known stack suffix:
## equality_expression
## LR(1) items:
and_expression -> equality_expression . [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
equality_expression -> equality_expression . EQ_OP relational_expression [ SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
equality_expression -> equality_expression . NE_OP relational_expression [ SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
## Transitions:
-- On NE_OP shift to state 109
-- On EQ_OP shift to state 111
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP
--   reduce production and_expression -> equality_expression

State 109:
## Known stack suffix:
## equality_expression NE_OP
## LR(1) items:
equality_expression -> equality_expression NE_OP . relational_expression [ SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 110
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 110:
## Known stack suffix:
## equality_expression NE_OP relational_expression
## LR(1) items:
equality_expression -> equality_expression NE_OP relational_expression . [ SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
relational_expression -> relational_expression . OPEN_ANGLE_CHR shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . CLOSE_ANGLE_CHR shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . LE_OP shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . GE_OP shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
-- On OPEN_ANGLE_CHR shift to state 75
-- On LE_OP shift to state 96
-- On GE_OP shift to state 98
-- On CLOSE_ANGLE_CHR shift to state 100
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP
--   reduce production equality_expression -> equality_expression NE_OP relational_expression

State 111:
## Known stack suffix:
## equality_expression EQ_OP
## LR(1) items:
equality_expression -> equality_expression EQ_OP . relational_expression [ SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 112
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 112:
## Known stack suffix:
## equality_expression EQ_OP relational_expression
## LR(1) items:
equality_expression -> equality_expression EQ_OP relational_expression . [ SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
relational_expression -> relational_expression . OPEN_ANGLE_CHR shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . CLOSE_ANGLE_CHR shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . LE_OP shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
relational_expression -> relational_expression . GE_OP shift_expression [ SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP LE_OP GE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ]
## Transitions:
-- On OPEN_ANGLE_CHR shift to state 75
-- On LE_OP shift to state 96
-- On GE_OP shift to state 98
-- On CLOSE_ANGLE_CHR shift to state 100
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP NE_OP EQ_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP
--   reduce production equality_expression -> equality_expression EQ_OP relational_expression

State 113:
## Known stack suffix:
## and_expression
## LR(1) items:
exclusive_or_expression -> and_expression . [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP
--   reduce production exclusive_or_expression -> and_expression

State 114:
## Known stack suffix:
## inclusive_or_expression
## LR(1) items:
logical_and_expression -> inclusive_or_expression . [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
## Transitions:
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP
--   reduce production logical_and_expression -> inclusive_or_expression

State 115:
## Known stack suffix:
## logical_or_expression QUES_CHR expression
## LR(1) items:
conditional_expression -> logical_or_expression QUES_CHR expression . COLON_CHR conditional_expression [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
expression -> expression . COMMA_CHR assignment_expression [ COMMA_CHR COLON_CHR ]
## Transitions:
-- On COMMA_CHR shift to state 116
-- On COLON_CHR shift to state 119
## Reductions:

State 116:
## Known stack suffix:
## expression COMMA_CHR
## LR(1) items:
expression -> expression COMMA_CHR . assignment_expression [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 118
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 117:
## Known stack suffix:
## conditional_expression
## LR(1) items:
assignment_expression -> conditional_expression . [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR
--   reduce production assignment_expression -> conditional_expression

State 118:
## Known stack suffix:
## expression COMMA_CHR assignment_expression
## LR(1) items:
expression -> expression COMMA_CHR assignment_expression . [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR
--   reduce production expression -> expression COMMA_CHR assignment_expression

State 119:
## Known stack suffix:
## logical_or_expression QUES_CHR expression COLON_CHR
## LR(1) items:
conditional_expression -> logical_or_expression QUES_CHR expression COLON_CHR . conditional_expression [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 120
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 120:
## Known stack suffix:
## logical_or_expression QUES_CHR expression COLON_CHR conditional_expression
## LR(1) items:
conditional_expression -> logical_or_expression QUES_CHR expression COLON_CHR conditional_expression . [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR
--   reduce production conditional_expression -> logical_or_expression QUES_CHR expression COLON_CHR conditional_expression

State 121:
## Known stack suffix:
## assignment_expression
## LR(1) items:
expression -> assignment_expression . [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR
--   reduce production expression -> assignment_expression

State 122:
## Known stack suffix:
## logical_or_expression OR_OP
## LR(1) items:
logical_or_expression -> logical_or_expression OR_OP . logical_and_expression [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 57
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_and_expression shift to state 123
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 123:
## Known stack suffix:
## logical_or_expression OR_OP logical_and_expression
## LR(1) items:
logical_and_expression -> logical_and_expression . AND_OP inclusive_or_expression [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR AND_OP ]
logical_or_expression -> logical_or_expression OR_OP logical_and_expression . [ SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On AND_OP shift to state 105
## Reductions:
-- On SEMI_CHR QUES_CHR OR_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR
--   reduce production logical_or_expression -> logical_or_expression OR_OP logical_and_expression

State 124:
## Known stack suffix:
## unary_expression EQ_CHR assignment_expression
## LR(1) items:
assignment_expression -> unary_expression EQ_CHR assignment_expression . [ SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On SEMI_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR
--   reduce production assignment_expression -> unary_expression EQ_CHR assignment_expression

State 125:
## Known stack suffix:
## identifier OPEN_PAREN_CHR close_paren
## LR(1) items:
postfix_expression -> identifier OPEN_PAREN_CHR close_paren . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production postfix_expression -> identifier OPEN_PAREN_CHR close_paren

State 126:
## Known stack suffix:
## assignment_expression
## LR(1) items:
argument_expression_list -> assignment_expression . [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On COMMA_CHR CLOSE_PAREN_CHR
--   reduce production argument_expression_list -> assignment_expression

State 127:
## Known stack suffix:
## identifier OPEN_PAREN_CHR argument_expression_list
## LR(1) items:
argument_expression_list -> argument_expression_list . COMMA_CHR assignment_expression [ COMMA_CHR CLOSE_PAREN_CHR ]
postfix_expression -> identifier OPEN_PAREN_CHR argument_expression_list . close_paren [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On COMMA_CHR shift to state 128
-- On CLOSE_PAREN_CHR shift to state 70
-- On close_paren shift to state 130
## Reductions:

State 128:
## Known stack suffix:
## argument_expression_list COMMA_CHR
## LR(1) items:
argument_expression_list -> argument_expression_list COMMA_CHR . assignment_expression [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 129
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 129:
## Known stack suffix:
## argument_expression_list COMMA_CHR assignment_expression
## LR(1) items:
argument_expression_list -> argument_expression_list COMMA_CHR assignment_expression . [ COMMA_CHR CLOSE_PAREN_CHR ]
## Transitions:
## Reductions:
-- On COMMA_CHR CLOSE_PAREN_CHR
--   reduce production argument_expression_list -> argument_expression_list COMMA_CHR assignment_expression

State 130:
## Known stack suffix:
## identifier OPEN_PAREN_CHR argument_expression_list close_paren
## LR(1) items:
postfix_expression -> identifier OPEN_PAREN_CHR argument_expression_list close_paren . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production postfix_expression -> identifier OPEN_PAREN_CHR argument_expression_list close_paren

State 131:
## Known stack suffix:
## unary_operator cast_expression
## LR(1) items:
unary_expression -> unary_operator cast_expression . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP GE_OP EQ_OP EQ_CHR DIV_CHR COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production unary_expression -> unary_operator cast_expression

State 132:
## Known stack suffix:
## OPEN_PAREN_CHR expression
## LR(1) items:
expression -> expression . COMMA_CHR assignment_expression [ COMMA_CHR CLOSE_PAREN_CHR ]
primary_expression -> OPEN_PAREN_CHR expression . CLOSE_PAREN_CHR [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
-- On COMMA_CHR shift to state 116
-- On CLOSE_PAREN_CHR shift to state 133
## Reductions:

State 133:
## Known stack suffix:
## OPEN_PAREN_CHR expression CLOSE_PAREN_CHR
## LR(1) items:
primary_expression -> OPEN_PAREN_CHR expression CLOSE_PAREN_CHR . [ SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR ]
## Transitions:
## Reductions:
-- On SUB_CHR STAR_CHR SEMI_CHR QUES_CHR OR_OP OPEN_ANGLE_CHR NE_OP MOD_CHR LE_OP INC_OP GE_OP EQ_OP EQ_CHR DIV_CHR DEC_OP COMMA_CHR COLON_CHR CLOSE_PAREN_CHR CLOSE_ANGLE_CHR AND_OP ADD_CHR
--   reduce production primary_expression -> OPEN_PAREN_CHR expression CLOSE_PAREN_CHR

State 134:
## Known stack suffix:
## IF
## LR(1) items:
ifkw -> IF . [ OPEN_PAREN_CHR ]
## Transitions:
## Reductions:
-- On OPEN_PAREN_CHR
--   reduce production ifkw -> IF

State 135:
## Known stack suffix:
## FOR
## LR(1) items:
forkw -> FOR . [ OPEN_PAREN_CHR ]
## Transitions:
## Reductions:
-- On OPEN_PAREN_CHR
--   reduce production forkw -> FOR

State 136:
## Known stack suffix:
## CLOSE_BRACE_CHR
## LR(1) items:
close_brace -> CLOSE_BRACE_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production close_brace -> CLOSE_BRACE_CHR

State 137:
## Known stack suffix:
## whilekw
## LR(1) items:
iteration_statement -> whilekw . OPEN_PAREN_CHR expression close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On OPEN_PAREN_CHR shift to state 138
## Reductions:

State 138:
## Known stack suffix:
## whilekw OPEN_PAREN_CHR
## LR(1) items:
iteration_statement -> whilekw OPEN_PAREN_CHR . expression close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On expression shift to state 139
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 139:
## Known stack suffix:
## whilekw OPEN_PAREN_CHR expression
## LR(1) items:
expression -> expression . COMMA_CHR assignment_expression [ COMMA_CHR CLOSE_PAREN_CHR ]
iteration_statement -> whilekw OPEN_PAREN_CHR expression . close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On COMMA_CHR shift to state 116
-- On CLOSE_PAREN_CHR shift to state 70
-- On close_paren shift to state 140
## Reductions:

State 140:
## Known stack suffix:
## whilekw OPEN_PAREN_CHR expression close_paren
## LR(1) items:
iteration_statement -> whilekw OPEN_PAREN_CHR expression close_paren . statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On WHILE shift to state 41
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On RETURN shift to state 48
-- On OPEN_PAREN_CHR shift to state 49
-- On OPEN_BRACE_CHR shift to state 38
-- On INC_OP shift to state 50
-- On IF shift to state 134
-- On IDENTIFIER shift to state 7
-- On FOR shift to state 135
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On whilekw shift to state 137
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On statement shift to state 141
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On selection_statement shift to state 143
-- On return shift to state 144
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On jump_statement shift to state 148
-- On iteration_statement shift to state 149
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On ifkw shift to state 150
-- On identifier shift to state 68
-- On forkw shift to state 155
-- On expression_statement shift to state 162
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On compound_statement shift to state 165
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 141:
## Known stack suffix:
## whilekw OPEN_PAREN_CHR expression close_paren statement
## LR(1) items:
iteration_statement -> whilekw OPEN_PAREN_CHR expression close_paren statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production iteration_statement -> whilekw OPEN_PAREN_CHR expression close_paren statement

State 142:
## Known stack suffix:
## semi_chr
## LR(1) items:
expression_statement -> semi_chr . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_PAREN_CHR CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_PAREN_CHR CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production expression_statement -> semi_chr

State 143:
## Known stack suffix:
## selection_statement
## LR(1) items:
statement -> selection_statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production statement -> selection_statement

State 144:
## Known stack suffix:
## return
## LR(1) items:
jump_statement -> return . SEMI_CHR [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
jump_statement -> return . expression SEMI_CHR [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 145
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On expression shift to state 146
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 145:
## Known stack suffix:
## return SEMI_CHR
## LR(1) items:
jump_statement -> return SEMI_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production jump_statement -> return SEMI_CHR

State 146:
## Known stack suffix:
## return expression
## LR(1) items:
expression -> expression . COMMA_CHR assignment_expression [ SEMI_CHR COMMA_CHR ]
jump_statement -> return expression . SEMI_CHR [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On SEMI_CHR shift to state 147
-- On COMMA_CHR shift to state 116
## Reductions:

State 147:
## Known stack suffix:
## return expression SEMI_CHR
## LR(1) items:
jump_statement -> return expression SEMI_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production jump_statement -> return expression SEMI_CHR

State 148:
## Known stack suffix:
## jump_statement
## LR(1) items:
statement -> jump_statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production statement -> jump_statement

State 149:
## Known stack suffix:
## iteration_statement
## LR(1) items:
statement -> iteration_statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production statement -> iteration_statement

State 150:
## Known stack suffix:
## ifkw
## LR(1) items:
selection_statement -> ifkw . OPEN_PAREN_CHR expression CLOSE_PAREN_CHR statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw . OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE selection_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw . OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE compound_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On OPEN_PAREN_CHR shift to state 151
## Reductions:

State 151:
## Known stack suffix:
## ifkw OPEN_PAREN_CHR
## LR(1) items:
selection_statement -> ifkw OPEN_PAREN_CHR . expression CLOSE_PAREN_CHR statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR . expression CLOSE_PAREN_CHR compound_statement ELSE selection_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR . expression CLOSE_PAREN_CHR compound_statement ELSE compound_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On expression shift to state 152
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 152:
## Known stack suffix:
## ifkw OPEN_PAREN_CHR expression
## LR(1) items:
expression -> expression . COMMA_CHR assignment_expression [ COMMA_CHR CLOSE_PAREN_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR expression . CLOSE_PAREN_CHR statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR expression . CLOSE_PAREN_CHR compound_statement ELSE selection_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR expression . CLOSE_PAREN_CHR compound_statement ELSE compound_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On COMMA_CHR shift to state 116
-- On CLOSE_PAREN_CHR shift to state 153
## Reductions:

State 153:
## Known stack suffix:
## ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR
## LR(1) items:
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR . statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR . compound_statement ELSE selection_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR . compound_statement ELSE compound_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On WHILE shift to state 41
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On RETURN shift to state 48
-- On OPEN_PAREN_CHR shift to state 49
-- On OPEN_BRACE_CHR shift to state 38
-- On INC_OP shift to state 50
-- On IF shift to state 134
-- On IDENTIFIER shift to state 7
-- On FOR shift to state 135
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On whilekw shift to state 137
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On statement shift to state 154
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On selection_statement shift to state 143
-- On return shift to state 144
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On jump_statement shift to state 148
-- On iteration_statement shift to state 149
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On ifkw shift to state 150
-- On identifier shift to state 68
-- On forkw shift to state 155
-- On expression_statement shift to state 162
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On compound_statement shift to state 168
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 154:
## Known stack suffix:
## ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR statement
## LR(1) items:
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR statement

State 155:
## Known stack suffix:
## forkw
## LR(1) items:
iteration_statement -> forkw . OPEN_PAREN_CHR expression_statement expression_statement close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
iteration_statement -> forkw . OPEN_PAREN_CHR expression_statement expression_statement expression close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On OPEN_PAREN_CHR shift to state 156
## Reductions:

State 156:
## Known stack suffix:
## forkw OPEN_PAREN_CHR
## LR(1) items:
iteration_statement -> forkw OPEN_PAREN_CHR . expression_statement expression_statement close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
iteration_statement -> forkw OPEN_PAREN_CHR . expression_statement expression_statement expression close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On expression_statement shift to state 157
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 157:
## Known stack suffix:
## forkw OPEN_PAREN_CHR expression_statement
## LR(1) items:
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement . expression_statement close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement . expression_statement expression close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On expression_statement shift to state 158
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 158:
## Known stack suffix:
## forkw OPEN_PAREN_CHR expression_statement expression_statement
## LR(1) items:
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement . close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement . expression close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On OPEN_PAREN_CHR shift to state 49
-- On INC_OP shift to state 50
-- On IDENTIFIER shift to state 7
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On CLOSE_PAREN_CHR shift to state 70
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On identifier shift to state 68
-- On expression shift to state 159
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On close_paren shift to state 166
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 159:
## Known stack suffix:
## forkw OPEN_PAREN_CHR expression_statement expression_statement expression
## LR(1) items:
expression -> expression . COMMA_CHR assignment_expression [ COMMA_CHR CLOSE_PAREN_CHR ]
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement expression . close_paren statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On COMMA_CHR shift to state 116
-- On CLOSE_PAREN_CHR shift to state 70
-- On close_paren shift to state 160
## Reductions:

State 160:
## Known stack suffix:
## forkw OPEN_PAREN_CHR expression_statement expression_statement expression close_paren
## LR(1) items:
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement expression close_paren . statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On WHILE shift to state 41
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On RETURN shift to state 48
-- On OPEN_PAREN_CHR shift to state 49
-- On OPEN_BRACE_CHR shift to state 38
-- On INC_OP shift to state 50
-- On IF shift to state 134
-- On IDENTIFIER shift to state 7
-- On FOR shift to state 135
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On whilekw shift to state 137
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On statement shift to state 161
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On selection_statement shift to state 143
-- On return shift to state 144
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On jump_statement shift to state 148
-- On iteration_statement shift to state 149
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On ifkw shift to state 150
-- On identifier shift to state 68
-- On forkw shift to state 155
-- On expression_statement shift to state 162
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On compound_statement shift to state 165
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 161:
## Known stack suffix:
## forkw OPEN_PAREN_CHR expression_statement expression_statement expression close_paren statement
## LR(1) items:
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement expression close_paren statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement expression close_paren statement

State 162:
## Known stack suffix:
## expression_statement
## LR(1) items:
statement -> expression_statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production statement -> expression_statement

State 163:
## Known stack suffix:
## expression
## LR(1) items:
expression -> expression . COMMA_CHR assignment_expression [ SEMI_CHR COMMA_CHR ]
expression_statement -> expression . SEMI_CHR [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_PAREN_CHR CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On SEMI_CHR shift to state 164
-- On COMMA_CHR shift to state 116
## Reductions:

State 164:
## Known stack suffix:
## expression SEMI_CHR
## LR(1) items:
expression_statement -> expression SEMI_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_PAREN_CHR CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_PAREN_CHR CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production expression_statement -> expression SEMI_CHR

State 165:
## Known stack suffix:
## compound_statement
## LR(1) items:
statement -> compound_statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production statement -> compound_statement

State 166:
## Known stack suffix:
## forkw OPEN_PAREN_CHR expression_statement expression_statement close_paren
## LR(1) items:
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement close_paren . statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On WHILE shift to state 41
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On RETURN shift to state 48
-- On OPEN_PAREN_CHR shift to state 49
-- On OPEN_BRACE_CHR shift to state 38
-- On INC_OP shift to state 50
-- On IF shift to state 134
-- On IDENTIFIER shift to state 7
-- On FOR shift to state 135
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On whilekw shift to state 137
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On statement shift to state 167
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On selection_statement shift to state 143
-- On return shift to state 144
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On jump_statement shift to state 148
-- On iteration_statement shift to state 149
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On ifkw shift to state 150
-- On identifier shift to state 68
-- On forkw shift to state 155
-- On expression_statement shift to state 162
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On compound_statement shift to state 165
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 167:
## Known stack suffix:
## forkw OPEN_PAREN_CHR expression_statement expression_statement close_paren statement
## LR(1) items:
iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement close_paren statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production iteration_statement -> forkw OPEN_PAREN_CHR expression_statement expression_statement close_paren statement

State 168:
## Known stack suffix:
## ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement
## LR(1) items:
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement . ELSE selection_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement . ELSE compound_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
statement -> compound_statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On ELSE shift to state 169
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production statement -> compound_statement

State 169:
## Known stack suffix:
## ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE
## LR(1) items:
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE . selection_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE . compound_statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On OPEN_BRACE_CHR shift to state 38
-- On IF shift to state 134
-- On selection_statement shift to state 170
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On ifkw shift to state 150
-- On compound_statement shift to state 171
## Reductions:

State 170:
## Known stack suffix:
## ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE selection_statement
## LR(1) items:
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE selection_statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE selection_statement

State 171:
## Known stack suffix:
## ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE compound_statement
## LR(1) items:
selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE compound_statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production selection_statement -> ifkw OPEN_PAREN_CHR expression CLOSE_PAREN_CHR compound_statement ELSE compound_statement

State 172:
## Known stack suffix:
## type_specifier
## LR(1) items:
declaration -> type_specifier . declarator SEMI_CHR [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
declaration_ptr_fun -> type_specifier . OPEN_PAREN_CHR STAR_CHR identifier CLOSE_PAREN_CHR parameter_specifier [ SEMI_CHR ]
scalar_specifier -> type_specifier . STAR_CHR [ STAR_CHR OPEN_PAREN_CHR IDENTIFIER ]
## Transitions:
-- On STAR_CHR shift to state 4
-- On OPEN_PAREN_CHR shift to state 5
-- On IDENTIFIER shift to state 7
-- On identifier shift to state 24
-- On declarator shift to state 34
## Reductions:

State 173:
## Known stack suffix:
## open_block statement_list
## LR(1) items:
compound_statement -> open_block statement_list . close_block [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
statement_list -> statement_list . statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On WHILE shift to state 41
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On RETURN shift to state 48
-- On OPEN_PAREN_CHR shift to state 49
-- On OPEN_BRACE_CHR shift to state 38
-- On INC_OP shift to state 50
-- On IF shift to state 134
-- On IDENTIFIER shift to state 7
-- On FOR shift to state 135
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On CLOSE_BRACE_CHR shift to state 136
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On whilekw shift to state 137
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On statement shift to state 174
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On selection_statement shift to state 143
-- On return shift to state 144
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On jump_statement shift to state 148
-- On iteration_statement shift to state 149
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On ifkw shift to state 150
-- On identifier shift to state 68
-- On forkw shift to state 155
-- On expression_statement shift to state 162
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On compound_statement shift to state 165
-- On close_brace shift to state 175
-- On close_block shift to state 176
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 174:
## Known stack suffix:
## statement_list statement
## LR(1) items:
statement_list -> statement_list statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production statement_list -> statement_list statement

State 175:
## Known stack suffix:
## close_brace
## LR(1) items:
close_block -> close_brace . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production close_block -> close_brace

State 176:
## Known stack suffix:
## open_block statement_list close_block
## LR(1) items:
compound_statement -> open_block statement_list close_block . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production compound_statement -> open_block statement_list close_block

State 177:
## Known stack suffix:
## statement
## LR(1) items:
statement_list -> statement . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production statement_list -> statement

State 178:
## Known stack suffix:
## declaration_ptr_fun
## LR(1) items:
declaration -> declaration_ptr_fun . SEMI_CHR [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On SEMI_CHR shift to state 179
## Reductions:

State 179:
## Known stack suffix:
## declaration_ptr_fun SEMI_CHR
## LR(1) items:
declaration -> declaration_ptr_fun SEMI_CHR . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production declaration -> declaration_ptr_fun SEMI_CHR

State 180:
## Known stack suffix:
## open_block declaration_list
## LR(1) items:
compound_statement -> open_block declaration_list . close_block [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
compound_statement -> open_block declaration_list . statement_list close_block [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
declaration_list -> declaration_list . declaration [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On WHILE shift to state 41
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On RETURN shift to state 48
-- On OPEN_PAREN_CHR shift to state 49
-- On OPEN_BRACE_CHR shift to state 38
-- On INTEGER shift to state 1
-- On INC_OP shift to state 50
-- On IF shift to state 134
-- On IDENTIFIER shift to state 7
-- On FOR shift to state 135
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On CLOSE_BRACE_CHR shift to state 136
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On whilekw shift to state 137
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On type_specifier shift to state 172
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On statement_list shift to state 181
-- On statement shift to state 177
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On selection_statement shift to state 143
-- On scalar_specifier shift to state 15
-- On return shift to state 144
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On jump_statement shift to state 148
-- On iteration_statement shift to state 149
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On ifkw shift to state 150
-- On identifier shift to state 68
-- On forkw shift to state 155
-- On expression_statement shift to state 162
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On declaration_ptr_fun shift to state 178
-- On declaration shift to state 183
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On compound_statement shift to state 165
-- On close_brace shift to state 175
-- On close_block shift to state 184
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 181:
## Known stack suffix:
## open_block declaration_list statement_list
## LR(1) items:
compound_statement -> open_block declaration_list statement_list . close_block [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
statement_list -> statement_list . statement [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
-- On WHILE shift to state 41
-- On TILDE_CHR shift to state 42
-- On SUB_CHR shift to state 43
-- On STRING_LITERAL shift to state 44
-- On STAR_CHR shift to state 46
-- On SEMI_CHR shift to state 47
-- On RETURN shift to state 48
-- On OPEN_PAREN_CHR shift to state 49
-- On OPEN_BRACE_CHR shift to state 38
-- On INC_OP shift to state 50
-- On IF shift to state 134
-- On IDENTIFIER shift to state 7
-- On FOR shift to state 135
-- On DEC_OP shift to state 51
-- On CONSTANT shift to state 52
-- On CLOSE_BRACE_CHR shift to state 136
-- On BANG_CHR shift to state 53
-- On AMP_CHR shift to state 54
-- On ADD_CHR shift to state 55
-- On whilekw shift to state 137
-- On unary_operator shift to state 56
-- On unary_expression shift to state 71
-- On tilde_chr shift to state 58
-- On sub_chr shift to state 59
-- On string_literal shift to state 60
-- On statement shift to state 174
-- On star_chr shift to state 61
-- On shift_expression shift to state 73
-- On semi_chr shift to state 142
-- On selection_statement shift to state 143
-- On return shift to state 144
-- On relational_expression shift to state 74
-- On primary_expression shift to state 62
-- On postfix_expression shift to state 63
-- On open_brace shift to state 39
-- On open_block shift to state 40
-- On multiplicative_expression shift to state 77
-- On logical_or_expression shift to state 102
-- On logical_and_expression shift to state 104
-- On jump_statement shift to state 148
-- On iteration_statement shift to state 149
-- On inclusive_or_expression shift to state 114
-- On inc_op shift to state 66
-- On ifkw shift to state 150
-- On identifier shift to state 68
-- On forkw shift to state 155
-- On expression_statement shift to state 162
-- On expression shift to state 163
-- On exclusive_or_expression shift to state 107
-- On equality_expression shift to state 108
-- On dec_op shift to state 79
-- On constant shift to state 81
-- On conditional_expression shift to state 117
-- On compound_statement shift to state 165
-- On close_brace shift to state 175
-- On close_block shift to state 182
-- On cast_expression shift to state 90
-- On bang_chr shift to state 82
-- On assignment_expression shift to state 121
-- On and_expression shift to state 113
-- On amp_chr shift to state 83
-- On additive_expression shift to state 91
-- On add_chr shift to state 84
## Reductions:

State 182:
## Known stack suffix:
## open_block declaration_list statement_list close_block
## LR(1) items:
compound_statement -> open_block declaration_list statement_list close_block . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production compound_statement -> open_block declaration_list statement_list close_block

State 183:
## Known stack suffix:
## declaration_list declaration
## LR(1) items:
declaration_list -> declaration_list declaration . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production declaration_list -> declaration_list declaration

State 184:
## Known stack suffix:
## open_block declaration_list close_block
## LR(1) items:
compound_statement -> open_block declaration_list close_block . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production compound_statement -> open_block declaration_list close_block

State 185:
## Known stack suffix:
## declaration
## LR(1) items:
declaration_list -> declaration . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production declaration_list -> declaration

State 186:
## Known stack suffix:
## open_block close_block
## LR(1) items:
compound_statement -> open_block close_block . [ WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR ]
## Transitions:
## Reductions:
-- On WHILE TILDE_CHR SUB_CHR STRING_LITERAL STAR_CHR SEMI_CHR RETURN OPEN_PAREN_CHR OPEN_BRACE_CHR INTEGER INC_OP IF IDENTIFIER FOR EOF ELSE DEC_OP CONSTANT CLOSE_BRACE_CHR BANG_CHR AMP_CHR ADD_CHR
--   reduce production compound_statement -> open_block close_block

State 187:
## Known stack suffix:
## function_declarator compound_statement
## LR(1) items:
function_definition -> function_declarator compound_statement . [ INTEGER EOF ]
## Transitions:
## Reductions:
-- On INTEGER EOF
--   reduce production function_definition -> function_declarator compound_statement

State 188:
## Known stack suffix:
## file
## LR(1) items:
file' -> file . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept file

State 189:
## Known stack suffix:
## external_declaration
## LR(1) items:
file -> external_declaration . file [ # ]
## Transitions:
-- On INTEGER shift to state 1
-- On EOF shift to state 2
-- On type_specifier shift to state 3
-- On scalar_specifier shift to state 15
-- On function_definition shift to state 36
-- On function_declarator shift to state 37
-- On file shift to state 190
-- On external_declaration shift to state 189
-- On declaration_ptr_fun shift to state 178
-- On declaration shift to state 191
## Reductions:

State 190:
## Known stack suffix:
## external_declaration file
## LR(1) items:
file -> external_declaration file . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production file -> external_declaration file

State 191:
## Known stack suffix:
## declaration
## LR(1) items:
external_declaration -> declaration . [ INTEGER EOF ]
## Transitions:
## Reductions:
-- On INTEGER EOF
--   reduce production external_declaration -> declaration

